import React, {useRef, useState, useEffect} from 'react'// @ts-ignoreimport styles from './style.module.scss'import { ITodoAppReducer, TodoAction } from '../../reducer/TodoAppReducer'interface ITodos extends ITodoAppReducer { // создаем интерфейс для типизации dispatch и удаления, изменения задач    onRemoved: (id: string) => void;    onEdited: (title: string) => void;    dispatch: React.Dispatch<TodoAction>;    todo: ITodoAppReducer; // копируем нашу схему задач}export const Todo: React.FC<ITodos> = (props) => {    const { id, title, todo, onRemoved, onEdited, dispatch } = props // делаем деструктуризацию    const [isEditMode, setIsEditMode] = useState('list') // создаем стейт для хранения состояния редактирования нашей задачи    const [value, setValue] = useState(title) // создаем стейт, где храним наше название задачи    const editTitleInputRef = useRef<HTMLInputElement>(null) // фокус на инпут    const [drag, setDrag] = useState({ // стейт для хранения изменения ширины поля        active: false,        x: +'',    });    const [dims, setDims] = useState({ // стейт для хранения начальной длинны нашего поля        w: 700,    });    const boxStyle = {  // переменная, которую мы цепляем к тому, где будет изменяться ширина        width: `${dims.w}px`,    };    // функция для начала изменения ширины поля    const startResize: React.MouseEventHandler<HTMLButtonElement> = (e) => {        setDrag({ // наши значения            active: true,            x: e.clientX,        });    };    // функция для изменения нашего поля    const resizeFrame: React.MouseEventHandler<HTMLDivElement>  = (e) => {        const { active, x } = drag; // делаем деструктуризацию        if (active) { // делаем проверку, если true, то мы начинаем изменять ширину поля            const xDiff = Math.abs(+x - e.clientX);            const newW = x > e.clientX ? dims.w - xDiff : dims.w + xDiff;            setDrag({ ...drag, x: e.clientX }); // возвращаем новые полученные значения            setDims({ w: newW }); // возвращаем новую ширину поля        }    };    const stopResize: React.MouseEventHandler<HTMLDivElement>  = (e) => { // ручка для прекращения изменения ширины поля        setDrag({ ...drag, active: false });    };    const handleChange: React.ChangeEventHandler<HTMLInputElement> = (e) => { // ручка для доставания значения из нашего стейта        setValue(e.target.value)    }    const handleToggle = (id: string) => { // функция для изменения состояния нашей задачи        dispatch({            type: "TOGGLE_TODO",            payload: { id: id }        })    }    const handleKeyDown: React.KeyboardEventHandler<HTMLInputElement> = (e) => { // ручка для добавления задачи через клавишу "Enter"        if (e.key === 'Enter') { // проверка на нажатие клавиши Enter            onEdited(value) // добавление в лист измененного значения            setIsEditMode('onEdited') // режим изменения задачи            setIsEditMode('list') // режим не изменения задачи        }    }    // добавления эффекта фокуса на инпут после каждого рендера, с добавлением этого режима в массив зависимостей    // поскольку мы будем добавлять фокус каждый раз когда входим в режим редактирования задачи    useEffect(() => {        if (isEditMode) {            editTitleInputRef?.current?.focus()        }    },[isEditMode])    return (        <div onMouseMove={resizeFrame} onMouseUp={stopResize}>            <div style={boxStyle}>                <div                    className={styles.todo}                    style={{ backgroundColor: todo.isComplete ? 'green' : 'cornflowerblue' }}                >                    {isEditMode === 'list'                        ? <>                            <input                                readOnly                                checked={todo.isComplete}                                type='checkbox'                                className={styles.todoCheckbox}                                onClick={() => handleToggle(id)}                                onKeyDown={handleKeyDown}                            />                            <span className={styles.todoTitle}>{title}</span>                            <button                                className={styles.todoEdit}                                onClick={() => {                                    setIsEditMode('onEdited')                                }}                            >                                Edit                            </button>                            <button                                className={styles.todoRemove}                                onClick={() => {                                    onRemoved(id)}}                            >                                Remove                            </button>                            <button                                className={styles.todoRemove}                                onMouseDown={startResize}                            >                                Size                            </button>                        </>                        : <>                            <input                                value={value}                                onChange={handleChange}                                className={styles.todoInputEdit}                                ref={editTitleInputRef}                                onKeyDown={handleKeyDown}                            />                            <button                                className={styles.todoEditSave}                                onClick={() => {                                    onEdited(value)                                    setIsEditMode('list')                                }}                            >                                Save                            </button>                            <button                                className={styles.todoEditCancel}                                onClick={() => {                                    setIsEditMode('list')                                }}                            >                                Cancel                            </button>                        </>                    }                </div>            </div>        </div>    )}