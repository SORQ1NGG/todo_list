import { generateId } from "../helpers";export interface ITodoAppReducer {    id: string;    title: string;    isComplete: boolean}interface AddTodoAction {    type: "ADD_TODO"    payload: {title: string}}interface RemoveTodoAction {    type: "REMOVE_TODO" | "TOGGLE_TODO"    payload: {id: string}}interface EditTodoAction {    type: "EDIT_TODO"    payload: {id: string, title: string}}export type TodoAction = AddTodoAction | RemoveTodoAction | EditTodoActionexport const TodoAppReducer = (todos: Array<ITodoAppReducer>, action: TodoAction) => {    const newTodo = (title: string): ITodoAppReducer => {        return { id: generateId(), title: title, isComplete: false };    }    switch (action.type) {        case "ADD_TODO":        {            return [...todos, newTodo(action.payload.title)]        }        case "REMOVE_TODO":        {            return todos.filter((todo) => todo.id !== action.payload.id)        }        case "EDIT_TODO":        {            const idx = todos.findIndex(todo => todo.id === action.payload.id)            const todoItems = todos[idx]            todoItems.title = action.payload.title            const todo = todos            todo.splice(idx, 1, todoItems)            return [...todos]        }        case "TOGGLE_TODO":        {            return todos.map((todo) => {                if (todo.id !== action.payload.id) return todo                return { ...todo, isComplete: !todo.isComplete }            })        }        default:            return todos    }}